/* Copyright (C) 2012 MoSync AB

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License,
version 2, as published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
MA 02110-1301, USA.
*/

#ifndef __ANDROID_EVENTQUEUE_H__
#define __ANDROID_EVENTQUEUE_H__

#include "config_platform.h"
#include <helpers/cpp_defs.h>
#include <helpers/helpers.h>
#include <helpers/CriticalSection.h>
#include <helpers/fifo.h>

/**
 * Class that holds events in the MoSync event queue.
 * This class protected the event queue from overflowing
 * in cases when there are very many events generated by
 * the system, such as sensor events. For such events the
 * last event is updated with the most recent event data,
 * no new events are put into the queue in this case, until
 * the current event in the queue has been consumed.
 *
 * This class is curreently used by the Android runtime.
 *
 * @author Mikael Kindborg
 */

#define ANDROID_EVENTQUEUE_SENSORARRAYSIZE 32
#define ANDROID_EVENTQUEUE_POINTERARRAYSIZE 32

class EventQueue
{
public:
	EventQueue();
	void put(MAEvent& event);
	const MAEvent& get();
	size_t count();
	void clear();

private:
	// Data structure holding the actual events.
	CircularFifo<MAEvent, EVENT_BUFFER_SIZE> mFifo;

	// Non-NULL if there is an EVENT_TYPE_POINTER_DRAGGED
	// in the queue. The array is used for multi-touch
	// pointers.
	MAEvent* mLastPointerDraggedEvents[ANDROID_EVENTQUEUE_POINTERARRAYSIZE];

	// Non-NULL if there is an EVENT_TYPE_SENSOR
	// in the queue. The array is used for subtypes
	// of sensor events. Actual values used are 1..6
	// at the time of writing this code. To have more
	// entries than used now makes room for future subtypes.
	MAEvent* mLastSensorEvents[ANDROID_EVENTQUEUE_SENSORARRAYSIZE];

	// Protects for concurrent calls.
	CRITICAL_SECTION mCriticalSection;
};

#endif
