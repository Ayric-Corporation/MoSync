/* Copyright (C) 2011 MoSync AB

 This program is free software; you can redistribute it and/or modify it under
 the terms of the GNU General Public License, version 2, as published by
 the Free Software Foundation.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 for more details.

 You should have received a copy of the GNU General Public License
 along with this program; see the file COPYING.  If not, write to the Free
 Software Foundation, 59 Temple Place - Suite 330, Boston, MA
 02111-1307, USA.
 */

#import <Foundation/Foundation.h>
#import <UIKit/UIKit.h>

#import "AbstractLayoutView.h"
#import "Syscall.h"
#include "WidgetUtils.h"

namespace Base {
    UIFont* getUIFontObject(MAHandle fontHandle);
};

@interface IWidget : NSObject
{
    @protected
    /**
     * Contains view's subviews.
     */
	NSMutableArray* _children;

    @private
    /**
     * Widget's represention on iOS platform.
     */
    UIView* _view;

    /**
     * Widget's parent.
     * If the widget doesn't have an parent this value will be nil.
     * A widget can have only one parent.
     */
    IWidget* _parent;

    /**
     * Widget's handle.
     * It must be set after creating the widget.
     * After that its value should not be modified.
     */
    MAHandle _handle;

    /**
     * Auto size enum for width.
     */
    WidgetAutoSizeType _autoSizeWidth;

    /**
     * Auto size enum for height.
     */
    WidgetAutoSizeType _autoSizeHeight;
}

@property(nonatomic, retain) UIView* view;
@property(nonatomic, retain) IWidget* parent;
@property(nonatomic, assign) MAHandle handle;
@property(nonatomic, setter = setWidth:, getter = width) CGFloat width;
@property(nonatomic, setter = setHeight:, getter = height) CGFloat height;
@property(nonatomic, setter = setSize:, getter = size) CGSize size;
@property(nonatomic, assign) WidgetAutoSizeType autoSizeWidth;
@property(nonatomic, assign) WidgetAutoSizeType autoSizeHeight;
@property(nonatomic, setter = setOriginX:, getter = originX) CGFloat originX;
@property(nonatomic, setter = setOriginY:, getter = originY) CGFloat originY;

/**
 * Set widget's auto size width and height values.
 * @param autoSizeWidth Width auto size value to set.
 * @param autoSizeHeight Height auto size value to set.
 */
-(void) setAutoSizeWidth:(WidgetAutoSizeType)autoSizeWidth
                  height:(WidgetAutoSizeType)autoSizeHeight;

/**
 * Adds an widget to the end of the children list.
 * Override this method to provide functionality.
 * The overrided method should verify if the widget can have children or not.
 * @param child Widget to be added.
 * @return MAW_RES_INVALID_LAYOUT.
 */
- (int)addChild:(IWidget*)child;

/**
 * Adds an widget to the end of the children list.
 * It does not check if the widget can have children.
 * @param child Widget to be added.
 * @param toSubview If true child's view will be added as subview, otherwise
 * it only be added to a list.
 */
- (void)addChild: (IWidget*)child toSubview:(BOOL)toSubview;

- (int)insertChild: (IWidget*)child atIndex:(NSNumber*)index toSubview:(bool)addSubview;
- (int)insertChild: (IWidget*)child atIndex:(NSNumber*)index;

- (int)remove;
- (void)removeChild: (IWidget*)child;
- (void)removeChild: (IWidget*)child fromSuperview:(bool)removeFromSuperview;

// the caller is responsible for releasing the 'key' and the 'value'
- (int)setPropertyWithKey: (NSString*)key toValue: (NSString*)value;

// the caller is responsible for releasing the return value
// if you implement this make sure you pass ownership to the caller.
- (NSString*)getPropertyWithKey: (NSString*)key;

/**
 * Recalculate its and children size.
 * If needed and possible the parent will be resized too.
 */
- (void)layout;

/**
 * Layout its children size.
 * This method should be called by the class generated by widget layouting macro.
 * @param view The view that requested the operation.
 */
-(void) layoutSubviews:(UIView*) view;

/**
 * Asks the widget to calculate and return the size that best fits its subviews.
 * An IWidget object should not have children so the returned value will be the size
 * that fits itself.
 * Override this method if your widget can have children and calculate their size.
 * @return The size that best fits itself.
 */
- (CGSize)sizeThatFitsForWidget;

/**
 * Send a widget event type.
 * @param eventDataType One of the MAW_EVENT constants.
 */
- (void) sendEvent:(const int) eventDataType;

// when a root screen is shown, this will be called recursively for all widgets.
- (void)show;

/**
 * Setter for MAW_WIDGET_WIDTH.
 * @param value MAW_CONSTANT_FILL_AVAILABLE_SPACE, MAW_CONSTANT_WRAP_CONTENT or
 * an int value greater or equal to zero.
 * @return MAW_RES_OK if the width was set, otherwise MAW_RES_INVALID_PROPERTY_VALUE.
 */
-(int) setWidthProperty:(NSString*) value;

/**
 * Setter for MAW_WIDGET_HEIGHT.
 * @param value MAW_CONSTANT_FILL_AVAILABLE_SPACE, MAW_CONSTANT_WRAP_CONTENT or
 * an int value greater or equal to zero.
 * @return MAW_RES_OK if the height was set, otherwise MAW_RES_INVALID_PROPERTY_VALUE.
 */
-(int) setHeightProperty:(NSString*) value;

@end
