/* Copyright 2013 David Axmark

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#include "IX_AUDIOBUFFER_CONSTS.h"
#include "helpers.h"

import java.io.*;

final class AudioBufferInputStream extends InputStream {
	private final byte[] mBuffer;
	private final int mAddress;
	private final int[] mem_ds;
	private final MainCanvas mCanvas;
	private int mPos;

	AudioBufferInputStream(MainCanvas canvas, int[] mem, int address, int bufferSize) {
		mBuffer = new byte[bufferSize];
		mAddress = address;
		this.mem_ds = mem;
		mCanvas = canvas;
		mPos = mBuffer.length;
	}

	private final void sendEvent() {
		//DEBUG_SOUND("sendEvent\n");
		int[] event = new int[1];
		EI_TYPE = EVENT_TYPE_AUDIOBUFFER_FILL;
		mCanvas.postEvent(event);
	}

	public final synchronized void ready() {
		DEBUG_SOUND("ABIS.ready()\n");
		MYASSERT(mPos == mBuffer.length);
		mPos = 0;
		notify();
	}

	public final synchronized void checkBuffer() {
		if(mPos == mBuffer.length) {
			sendEvent();
			while(true) {
				try {
					DEBUG_SOUND("ABIS.wait()\n");
					wait();
					//only if the wait was not interrupted, but properly notified, will the loop end.
					DEBUG_SOUND("ABIS.wait completed!\n");
					break;
				} catch(InterruptedException e) {
					PRINT_STACK_TRACE;
				}
			}
			DEBUG_ASSERT(mPos == 0);
		}
	}

	public final synchronized int read() {
		DEBUG_SOUND("ABIS.read()\n");
		checkBuffer();
		return mBuffer[mPos++];
	}

	public final synchronized int read(byte[] b, int off, int len) {
		DEBUG_SOUND("ABIS.read("+b.length+", "+off+", "+len+")\n");
		checkBuffer();
		int actual = MIN(len, mBuffer.length - mPos);
		System.arraycopy(mBuffer, mPos, b, off, actual);
		mPos += actual;
		return actual;
	}
}
