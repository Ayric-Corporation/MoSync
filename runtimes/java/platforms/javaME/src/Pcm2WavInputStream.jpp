/* Copyright 2013 David Axmark

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#include "IX_AUDIOBUFFER_CONSTS.h"
#include "helpers.h"

import java.io.*;

// Takes a stream with PCM data in a specified format.
// Outputs a WAV file header, followed by the PCM data.
// The length of the PCM data must not be greater than 2 GiB.
// That is the limit of the WAV header format.

final class Pcm2WavInputStream extends InputStream {
	//private final int mFmt, mSampleRate, mNumChannels;
	private final InputStream mPcmStream;

	private byte[] mHeader;
	private ByteArrayInputStream mHeaderStream;

	private InputStream mCurrentStream;

	Pcm2WavInputStream(InputStream pcmStream, int fmt, int sampleRate, int numChannels,
		int bufferSize)
		throws IOException
	{
		mPcmStream = pcmStream;
		int bytesPerSample;
		switch(fmt) {
		case AUDIO_FMT_S8:
		case AUDIO_FMT_U8:
			bytesPerSample = 1;
			break;
		case AUDIO_FMT_S16:
		case AUDIO_FMT_U16:
			bytesPerSample = 2;
			break;
		default:
			BIG_PHAT_ERROR;
		}

		mHeader = new byte[44];
		RefByteArrayOutputStream ho = new RefByteArrayOutputStream(mHeader, 0);
		ho.write("RIFF".getBytes());
		ho.writeLeInt(0x7FFFFFFF);	//max len
		ho.write("WAVEfmt ".getBytes());
		ho.writeLeInt(16);	//fmt chunk len
		ho.writeLeShort((short)1);	//PCM format
		ho.writeLeShort((short)numChannels);
		ho.writeLeInt(sampleRate);
		ho.writeLeInt(sampleRate * bytesPerSample * numChannels);	//bytes per second
		ho.writeLeShort((short)(bytesPerSample * numChannels));
		ho.writeLeShort((short)(bytesPerSample * 8));	//bits per sample
		ho.write("data".getBytes());
		ho.writeLeInt(bufferSize);
		//we should now have written 44 bytes to the header
		DEBUG_ALWAYS(new String(mHeader) + "\n");

		mHeaderStream = new ByteArrayInputStream(mHeader);
		mCurrentStream = mHeaderStream;
	}

	final public int read() throws IOException {
		int res = mCurrentStream.read();
		if(res < 0) {
			if(mCurrentStream == mHeaderStream) {
				//switch to PCM stream
				mCurrentStream = mPcmStream;
				return mCurrentStream.read();
			}
		}
		return res;
	}

	final public int read(byte[] b, int off, int len) throws IOException	{
		int res = mCurrentStream.read(b, off, len);
		if(res < 0) {
			if(mCurrentStream == mHeaderStream) {
				//switch to PCM stream
				mCurrentStream = mPcmStream;
				return mCurrentStream.read(b, off, len);
			}
		}
		return res;
	}

	final public int available() throws IOException {
		return mCurrentStream.available();
	}

	final public long skip(long n) throws IOException {
		return mCurrentStream.skip(n);
	}
}
