/* Copyright 2013 David Axmark

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#ifdef _android
package com.mosync.java.android;
#endif

#include "helpers.h"
#include "generated/MAAPI_consts.h"

#ifdef _JavaME
import javax.microedition.rms.*;
#if 0
import javax.microedition.io.*;
import javax.microedition.io.file.*;
#endif //0
#elif defined(_android)
import android.util.Log;
import android.content.*;
#endif

import java.io.*;
import java.lang.String;
import java.util.Date;

public class MAPanicReport
{
	int runtimeId;
	int reportType;
	int time;
	int ip;
	int code;
	String string;

#ifdef _JavaME
	public void writePanicReport(int reportType, int panicCode, String panicString, int panicIP)
#elif defined(_android)
	public void writePanicReport( Context context, int reportType, int panicCode, String panicString, int panicIP)
#endif
	{
		ip = panicIP;

		runtimeId = RUNTIME_JAVA;
		reportType = reportType;

		Date d = new Date();
		time = (int)(d.getTime() / 1000);

		code = panicCode;
		string = panicString;

		byte[] bdata;
		try {
			bdata = persist();
		} catch(IOException e)
		{
			PRINT_STACK_TRACE;
			return;
		}
#ifdef _JavaME
		// Store the panic report in the rms
		try {
			RecordStore store = RecordStore.openRecordStore("panic.report", true);
			store.addRecord(bdata, 0, bdata.length);
			store.closeRecordStore();
		} catch(RecordStoreNotFoundException e) {
			PRINT_STACK_TRACE;
		} catch(Exception e) {
			PRINT_STACK_TRACE;
		}
#if 0
		try {
			FileConnection filecon = (FileConnection) Connector.open("file:///SDCard/panic.report");
			if(!filecon.exists()) {
				filecon.create();
			}
			OutputStream os = filecon.openOutputStream();
			os.write(bdata, 0, bdata.length);
			os.close();
			filecon.close();
		} catch(IOException ioe) {
			PRINT_STACK_TRACE;
		}
#endif	//0
#elif defined(_android)
		// Write the panic report as a file on the device
		try {
			FileOutputStream fos = context.openFileOutput("panic.report", 0);
			fos.write(bdata);
			fos.close();
		} catch(FileNotFoundException e) {
			PRINT_STACK_TRACE;
		} catch(Exception e) {
			PRINT_STACK_TRACE;
		}
#else
#error Bad Java platform!
#endif
		return;

	}

	/*
	Send the data to a byte array thru a data stream
	*/
	public byte[] persist() throws IOException {
		ByteArrayOutputStream byteArrayStream = new ByteArrayOutputStream();
		DataOutputStream dataOutputStream = new DataOutputStream( byteArrayStream );

		dataOutputStream.writeInt(runtimeId);
		dataOutputStream.writeInt(reportType);
		dataOutputStream.writeInt(time);
		dataOutputStream.writeInt(ip);
		dataOutputStream.writeInt(code);
		dataOutputStream.writeChars(string);
		dataOutputStream.writeByte(0);
		dataOutputStream.flush();

		return byteArrayStream.toByteArray();
	}

}
