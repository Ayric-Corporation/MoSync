/* Copyright 2013 David Axmark

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#ifdef _android
package com.mosync.java.android;

import android.util.Log;
#endif

#include "helpers.h"

import java.util.Vector;

final class ThreadPool {	//implements Executor
	public void execute(Runnable r) {
		WorkerThread wt = null;
		for(int i=0; i<mThreads.size(); i++) {
			WorkerThread temp = (WorkerThread)mThreads.elementAt(i);
			if(temp.isAvailable()) {
				wt = temp;
				break;
			}
		}
		if(wt == null) {	//no available threads; we must make another.
			wt = new WorkerThread();
			mThreads.addElement(wt);
		}
		wt.start(r);
		//wt is now unavailable until r.run() returns.
	}

	public void stopEverything() {
		for(int i=0; i<mThreads.size(); i++) {
			WorkerThread wt = (WorkerThread)mThreads.elementAt(i);
			wt.stopWT();
		}
	}

	private Vector mThreads = new Vector();
}

final class WorkerThread extends Thread {
	public WorkerThread() {
		start();
	}

	public boolean isAvailable() {
		return mR == null;
	}
	synchronized public void start(Runnable r) {
		MYASSERT(isAvailable());
		mR = r;
		notify();
	}
	synchronized public void stopWT() {
		quit = true;
		notify();
	}

	public void run() {
		try {
			while(!quit) {
				synchronized(this) { while(mR == null) {
					try {
						wait();
					} catch(InterruptedException e) {
					}
					if(quit)
						return;
				} }
				mR.run();
				mR = null;
			}
		} catch(Throwable e) {
			PRINT_STACK_TRACE;
#ifdef _JavaME
			MAMidlet.self.programError("Asynchronous error", e);
#endif
		}
	}

	private Runnable mR;
	private boolean quit = false;
}
