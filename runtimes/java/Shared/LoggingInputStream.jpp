/* Copyright 2013 David Axmark

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

import java.io.*;

#include "helpers.h"

//A pass-through InputStream that works just like its source, except it logs everything.
final class LoggingInputStream extends InputStream {
	private InputStream mStream;
	private int mCount = 0;
#define MARK_SIZE (1024*1024)
	private int mLastMark = MARK_SIZE;

	LoggingInputStream(InputStream in) {
		mStream = in;
		DEBUG_ALWAYS("LoggingInputStream created from " + in.toString() + "\n");
	}
	public final int available() throws IOException {
		DEBUG_ALWAYS("available: " + mStream.available() + "\n");
		return mStream.available();
	}
	public final void close() throws IOException {
		DEBUG_ALWAYS("close()\n");
		mStream.close();
	}
	public final void mark(int readLimit) {
		DEBUG_ALWAYS("mark: " + readLimit + "\n");
		mStream.mark(readLimit);
	}	
	public final void reset() throws IOException {
		DEBUG_ALWAYS("reset()\n");
		mStream.reset();
	}	
	public final boolean markSupported() {
		DEBUG_ALWAYS("markSupported: " + mStream.markSupported() + "\n");
		return mStream.markSupported();
	}
	public final int read() throws IOException {
		DEBUG_ALWAYS("read()\n");
		mCount++;
		return mStream.read();
	}
	public final int read(byte[] b) throws IOException {
		DEBUG_ALWAYS("read(" + b.length + ")\n");
		mCount += b.length;
		return mStream.read(b);
	}
	public final int read(byte[] b, int off, int len) throws IOException {
		DEBUG_ALWAYS("read(" + b.length + ", " + off + ", " + len + ")\n");
		if(mCount > mLastMark) {
			DEBUG_ALWAYS(mLastMark + " bytes read\n");
			mLastMark += MARK_SIZE;
		}
		mCount += len;
		return mStream.read(b, off, len);
	}
	public final long skip(long n) throws IOException {
		DEBUG_ALWAYS("skip(" + n + ")\n");
		return mStream.skip(n);
	}
}	//LoggingInputStream
