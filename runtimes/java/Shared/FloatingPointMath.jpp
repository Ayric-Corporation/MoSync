/* Copyright 2013 David Axmark

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#define LTD(x) Double.longBitsToDouble(x)
#define DTL(x) Double.doubleToLongBits(x)	
#define ITF(x) Float.intBitsToFloat(x)
#define FTI(x) Float.floatToIntBits(x)

#ifdef MA_PROF_SUPPORT_CLDC_10
	// used for storing the doubles/floats when doing the arithmetical operations
	// so we don't need to allocate them for each operation.
	Real tempRealA = new Real();
	Real tempRealB = new Real();
#endif

#ifdef MA_PROF_SUPPORT_CLDC_10
	SYSCALL(long) __adddf3(long al, long bl) {
		tempRealA.assignDoubleBits(al);
		tempRealB.assignDoubleBits(bl);
		tempRealA.add(tempRealB);
		return tempRealA.toDoubleBits();
	}
	
	SYSCALL(long) __subdf3(long al, long bl) {
		tempRealA.assignDoubleBits(al);
		tempRealB.assignDoubleBits(bl);
		tempRealA.sub(tempRealB);
		return tempRealA.toDoubleBits();
	}
	
	SYSCALL(long) __muldf3(long al, long bl) {
		tempRealA.assignDoubleBits(al);
		tempRealB.assignDoubleBits(bl);
		tempRealA.mul(tempRealB);
		return tempRealA.toDoubleBits();
	}
	
	SYSCALL(long) __divdf3(long al, long bl) THE {
		tempRealB.assignDoubleBits(bl);
#ifndef MA_ALLOW_FLOAT_DIVISION_BY_ZERO
		if(tempRealB.isZero() == true)
			BIG_PHAT_ERROR;
#endif
		tempRealA.assignDoubleBits(al);
		tempRealA.div(tempRealB);
		return tempRealA.toDoubleBits();
	}
	
	SYSCALL(long) __negdf2(long al) {
		tempRealA.assignDoubleBits(al);	
		tempRealA.neg();
		return tempRealA.toDoubleBits();
	}

	SYSCALL(int) __fixdfsi(long al) {
		tempRealA.assignDoubleBits(al);	
		return tempRealA.toInteger();
	}

	SYSCALL(int) __fixunsdfsi(long al) {
		tempRealA.assignDoubleBits(al);	
		long l = tempRealA.toLong();
		if(l < 0)
			return 0;
		else
			return (int)l;
	}

	SYSCALL(long) STATIC_SYSCALL(__floatsidf)(int af) {
		tempRealA.assign(af);
		return tempRealA.toDoubleBits();
	}	

	SYSCALL(int) dcmp(long al, long bl) {
		tempRealA.assignDoubleBits(al);
		tempRealB.assignDoubleBits(bl);
		if(tempRealA.lessThan(tempRealB) == true) return -1;
		else if(tempRealA.equalTo(tempRealB) == true) return 0;
		else return 1;
	}

	SYSCALL(long) STATIC_SYSCALL(__extendsfdf2)(int fi) {
		tempRealA.assignFloatBits(fi);
		return tempRealA.toDoubleBits();
	}

	SYSCALL(long) sin(long xl) {
		tempRealA.assignDoubleBits(xl);
		tempRealA.sin();
		return tempRealA.toDoubleBits();
	}
	
	SYSCALL(long) cos(long xl) {
		tempRealA.assignDoubleBits(xl);
		tempRealA.cos();
		return tempRealA.toDoubleBits();
	}
	
	SYSCALL(long) tan(long xl) {
		tempRealA.assignDoubleBits(xl);
		tempRealA.tan();
		return tempRealA.toDoubleBits();
	}
	
	SYSCALL(long) sqrt(long xl) {
		tempRealA.assignDoubleBits(xl);
		tempRealA.sqrt();
		return tempRealA.toDoubleBits();
	}
	
#else /* MA_PROF_SUPPORT_CLDC11 */
	SYSCALL(long) __adddf3(long al, long bl) {
		double a = LTD(al);
		double b = LTD(bl);
		return DTL(a+b);
	}
	
	SYSCALL(long) __subdf3(long al, long bl) {
		double a = LTD(al);
		double b = LTD(bl);
		return DTL(a-b);
	}
	
	SYSCALL(long) __muldf3(long al, long bl) {
		double a = LTD(al);
		double b = LTD(bl);
		return DTL(a*b);
	}
	
	SYSCALL(long) __divdf3(long al, long bl) THE {
		double b = LTD(bl);
#ifndef MA_ALLOW_FLOAT_DIVISION_BY_ZERO
		if(b == 0)
			BIG_PHAT_ERROR; // return DTL(Double.NaN);
#endif
		double a = LTD(al);
		return DTL(a/b);
	}
	
	SYSCALL(long) __negdf2(long al) {
		double a = LTD(al);
		return DTL(-a);
	}
	
	SYSCALL(int) __fixdfsi(long al) {
		double a = LTD(al);
		return (int)a;
	}

	SYSCALL(int) __fixunsdfsi(long al) {
		double a = LTD(al);
		long l = (long)a;
		if(l < 0)
			return 0;
		else
			return (int)l;
	}

	SYSCALL(long) STATIC_SYSCALL(__floatsidf)(int a) {
		return DTL((double)a);
	}
	
	SYSCALL(int) dcmp(long al, long bl) {
		double a = LTD(al);
		double b = LTD(bl);
		if(a > b)
			return 1;
		else if(a == b)
			return 0;
		else	//a < b
			return -1;
	}

	SYSCALL(long) STATIC_SYSCALL(__extendsfdf2)(int fi) {
		float f = ITF(fi);
		return DTL((double)f);
	}

	SYSCALL(long) sin(long xl) {
		double x = LTD(xl);
		return DTL(Math.sin(x));
	}
	
	SYSCALL(long) cos(long xl) {
		double x = LTD(xl);
		return DTL(Math.cos(x));
	}
	
	SYSCALL(long) tan(long xl) {
		double x = LTD(xl);
		return DTL(Math.tan(x));
	}
	
	SYSCALL(long) sqrt(long xl) {
		double x = LTD(xl);
		return DTL(Math.sqrt(x));
	}
	
#endif /* MA_PROF_SUPPORT_CLDC11 */

#ifdef MA_PROF_SUPPORT_CLDC_10
	SYSCALL(int) __addsf3(int al, int bl) {
		tempRealA.assignFloatBits(al);
		tempRealB.assignFloatBits(bl);
		tempRealA.add(tempRealB);
		return tempRealA.toFloatBits();
	}
	
	SYSCALL(int) __subsf3(int al, int bl) {
		tempRealA.assignFloatBits(al);
		tempRealB.assignFloatBits(bl);
		tempRealA.sub(tempRealB);
		return tempRealA.toFloatBits();
	}
	
	SYSCALL(int) __mulsf3(int al, int bl) {
		tempRealA.assignFloatBits(al);
		tempRealB.assignFloatBits(bl);
		tempRealA.mul(tempRealB);
		return tempRealA.toFloatBits();
	}
	
	SYSCALL(int) __divsf3(int al, int bl) THE {
		tempRealB.assignFloatBits(bl);
#ifndef MA_ALLOW_FLOAT_DIVISION_BY_ZERO
		if(tempRealB.isZero() == true)
			BIG_PHAT_ERROR;
#endif
		tempRealA.assignFloatBits(al);
		tempRealA.div(tempRealB);
		return tempRealA.toFloatBits();
	}
	
	SYSCALL(int) __negsf2(int al) {
		tempRealA.assignFloatBits(al);
		tempRealA.neg();
		return tempRealA.toFloatBits();
	}
	
	SYSCALL(int) __fixsfsi(int al) {
		tempRealA.assignFloatBits(al);
		return tempRealA.toInteger();
	}

	SYSCALL(int) __fixunssfsi(int al) {
		tempRealA.assignFloatBits(al);
		long l = tempRealA.toLong();
		if(l < 0)
			return 0;
		else
			return (int)l;
	}

	SYSCALL(int) __floatsisf(int af) {
		tempRealA.assign(af);
		return tempRealA.toFloatBits();
	}	

	SYSCALL(int) fcmp(int al, int bl) {
		tempRealA.assignFloatBits(al);
		tempRealB.assignFloatBits(bl);		
		if(tempRealA.lessThan(tempRealB) == true) return -1;
		else if(tempRealA.equalTo(tempRealB) == true) return 0;
		else return 1;
	}	

	SYSCALL(int) __truncdfsf2(long fi) {
		tempRealA.assignDoubleBits(fi);
		return tempRealA.toFloatBits();
	}

#else /* MA_PROF_SUPPORT_CLDC11 */		
	SYSCALL(int) __addsf3(int al, int bl) {
		float a = ITF(al);
		float b = ITF(bl);
		return FTI(a+b);
	}
	
	SYSCALL(int) __subsf3(int al, int bl) {
		float a = ITF(al);
		float b = ITF(bl);
		return FTI(a-b);
	}
	
	SYSCALL(int) __mulsf3(int al, int bl) {
		float a = ITF(al);
		float b = ITF(bl);
		return FTI(a*b);
	}
	
	SYSCALL(int) __divsf3(int al, int bl) THE {
		float b = ITF(bl);
#ifndef MA_ALLOW_FLOAT_DIVISION_BY_ZERO
		if(b == 0)
			BIG_PHAT_ERROR; // return DTL(Double.NaN);
#endif
		float a = ITF(al);
		return FTI(a/b);
	}
	
	SYSCALL(int) __negsf2(int al) {
		float a = ITF(al);
		return FTI(-a);
	}
	
	SYSCALL(int) __fixsfsi(int al) {
		float a = ITF(al);
		return (int)a;
	}

	SYSCALL(int) __fixunssfsi(int al) {
		float a = ITF(al);
		long l = (long)a;
		if(l < 0)
			return 0;
		else
			return (int)l;
	}

	SYSCALL(int) __floatsisf(int a) {
		return FTI((float)a);
	}

	SYSCALL(int) __truncdfsf2(long fi) {
		double f = LTD(fi);
		return FTI((float)f);
	}

	SYSCALL(int) fcmp(int al, int bl) {
		float a = ITF(al);
		float b = ITF(bl);
		if(a > b)
			return 1;
		else if(a == b)
			return 0;
		else	//a < b
			return -1;
	}	
#endif /* MA_PROF_SUPPORT_CLDC11 */
