/* Copyright 2013 David Axmark

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * @file NativeUIMessageHandler.h
 * @author Ali Sarrafi
 *
 * Implementation of NativeUI calls made from JavaScript.
 */

#ifndef WORMHOLE_LIBS_JSNATIVEUI_NATIVEUIMESSAGEHANDLER_H_
#define WORMHOLE_LIBS_JSNATIVEUI_NATIVEUIMESSAGEHANDLER_H_

//#include <Wormhole/WebViewMessage.h>
#include <NativeUI/WebView.h>
#include <MAUtil/String.h>
#include "../../MessageStream.h"

namespace Wormhole
{
	/**
	 * Class that implements JavaScript calls.
	 *
	 * The JavaScript side is in file extendedbridge.js.
	 */
	class NativeUIMessageHandler:
		public MAUtil::CustomEventListener
	{
	public:
		/**
		 * Constructor.
		 */
		NativeUIMessageHandler(NativeUI::WebView* webView);

		/**
		 * Destructor.
		 */
		virtual ~NativeUIMessageHandler();

		/**
		 * Turn on processing of Native UI events.
		 */
		virtual void nativeUIEventsOn();

		/**
		 * Turn off processing of Native UI events.
		 */
		virtual void nativeUIEventsOff();

		/**
		 * Implementation of standard API exposed to JavaScript.
		 * @return true if message was handled, false if not.
		 */
		virtual bool handleMessage(Wormhole::MessageStream& message);

		/**
		 * Handles custom events generated by NativeUI Widgets.
		 */
		virtual void customEvent(const MAEvent&);

	protected:

		/**
		 * General wrapper for NativeUI success callback.
		 * If an operation is successful this function should be called.
		 *
		 * @param data the data that should be passed to the callback function
		 */
		virtual void sendNativeUISuccess(const char* data);

		/**
		 * General wrapper for NativeUI error callback.
		 * If an operation is successful this function should be called.
		 *
		 * @param data the data that should be passed to the callback function
		 */
		virtual void sendNativeUIError(const char* data);

		/**
		 * A Pointer to the main webview
		 * Used for communicating with NativeUI
		 */
		NativeUI::WebView* mWebView;

		/**
		 * If true, NativeUI events are sent to the WebView.
		 * If false, NativeUI events are not sent.
		 */
		bool mNativeUIEventsOn;
	};
} // namespace

#endif
