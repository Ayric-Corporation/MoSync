/* Copyright 2013 David Axmark

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * @file BannerManager.h
 * @author Emma Tresanszki and Bogdan Iusco
 * @date 1 Nov 2011
 *
 * @brief The BannnerManager manages banner events and dispatches
 * them to the target banners.
 */

#ifndef ADS_BANNER_MANAGER_H_
#define ADS_BANNER_MANAGER_H_

#include <MAUtil/String.h>
#include <MAUtil/Map.h>
#include <MAUtil/Environment.h>

namespace Ads
{

	// Forward declaration.
	class Banner;

	/**
	 * @brief Class that handles banner events.
	 */
	class BannerManager : public MAUtil::CustomEventListener
	{
	public:
		/**
		 * Destructor.
		 */
		virtual ~BannerManager();

		/**
		 * Return the single instance of this class.
		 */
		static BannerManager* getInstance();

		/**
		 * Destroy the single instance of this class.
		 * Call this method only when the application will exit.
		 */
		static void destroyInstance();

		/**
		 * Implementation of CustomEventListener interface.
		 * This method will get called whenever there is a
		 * widget event generated by the system.
		 * @param event The new received event.
		 */
		virtual void customEvent(const MAEvent& event);

		/**
		 * Add a banner to the map that holds banners.
		 * The banner will receive custom events.
		 * @param banner The banner that needs to be registered.
		 * The ownership of the banner is not passed to this method.
		 */
		virtual void registerBanner(Banner* banner);

		/**
		 * Remove a banner from the map that holds banners.
		 * The banner will not receive custom events.
		 * @param banner The banner that needs to be unregistered.
		 */
		virtual void unregisterBanner(Banner* banner);

	protected:
		/**
		 * Constructor is protected since this is a singleton.
		 * (subclasses can still create instances).
		 */
		BannerManager();

	private:
		/**
		 * The single instance of this class.
		 */
		static BannerManager* sInstance;

		/**
		 * Dictionary of banners identified by banner handle.
		 */
		MAUtil::Map<MAHandle, Banner*> mBannerMap;
	};

} // namespace Ads

#endif /* ADS_BANNER_MANAGER_H_ */
