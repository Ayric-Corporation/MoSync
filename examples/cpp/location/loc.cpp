/* Copyright 2013 David Axmark

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
* Usage example for the location API.
* A Moblet that retrieves Location events and prints raw data to the console.
*
* WARNING: The location API is experimental, not fully tested. It may not work as advertised.
* Implementation details are likely to change in the future.
*/


#include <conprint.h>
#include <maassert.h>
#include <MAUtil/Moblet.h>

using namespace MAUtil;

class LocationMoblet : public Moblet {
private:
	int mLastTime;
	bool active;
public:

	/**
	* Constructor
	*
	* Prints an initial message and attempts to begin
	* collecting location information.
	*/
	LocationMoblet() {
		printf("Instructions:\n-Press Fire/LSK or tap the screen to start/stop.\n-Press 0/RSK to exit.\n");

		start();
	}

	/**
	* Begins collecting location information.
	*/
	void start() {
		int res = maLocationStart();
		printf("Start: %i\n", res);
		active = res >= 0;
		mLastTime = maGetMilliSecondCount();
	}

	/**
	* Processes the user's key presses.
	*
	* @param keyCode     The key code of the key that was pressed
	*/
	void keyPressEvent(int keyCode, int nativeCode) {
		if(keyCode == MAK_0 || keyCode == MAK_SOFTRIGHT || keyCode == MAK_BACK)
			maExit(0);
		if(keyCode == MAK_FIRE || keyCode == MAK_SOFTLEFT) {
			if(active) {
				int res = maLocationStop();
				printf("Stop: %i\n", res);
				active = false;
			} else {
				start();
			}
		}
	}

	void pointerPressEvent(MAPoint2d /*point*/) {
		if(active) {
			int res = maLocationStop();
			printf("Stop: %i\n", res);
			active = false;
		} else {
			start();
		}
	}

	/**
	* Handles the custom location events generated by the location API.
	*/
	void customEvent(const MAEvent& event) {
		if(event.type == EVENT_TYPE_LOCATION) {
			MALocation& loc = *(MALocation*)event.data;

			if(loc.lon < -180.0 || loc.lon > 180.0 || loc.lat < -90.0 || loc.lat > 90.0) {
				printf("invalid lat or lon\n");
			} else {
				printf("%i %.8g %.8g %.4g %.4g %.4g\n",
					loc.state, loc.lat, loc.lon, loc.horzAcc, loc.vertAcc, loc.alt);
			}

			printf("%i ms\n", maGetMilliSecondCount() - mLastTime);
			mLastTime = maGetMilliSecondCount();
		} else if(event.type == EVENT_TYPE_LOCATION_PROVIDER) {
			const char *strings[]= {
				"AVAILABLE",
				"TEMPORARILY_UNAVAILABLE",
				"OUT_OF_SERVICE"
			};

			printf("gps provider: %s\n", strings[event.state-1]);

		} else {
			printf("custom event %i\n", event.type);
		}
	}
};

extern "C" int MAMain() {
	InitConsole();
	gConsoleLogging = 1;
	Moblet::run(new LocationMoblet());
	return 0;
}
