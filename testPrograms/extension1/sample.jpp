/* Copyright 2013 David Axmark

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#include "MX_SAMPLE_CONSTS.H"
#include "helpers.h"

import java.io.InputStream;
//import com.example.Timer;

class SampleExtension /*implements TimerListener*/ {
	MoSync mMoSync;
	//Timer mTimer;

	SampleExtension(MoSync m) {
		mMoSync = m;
	}

	void destruct() {}

	/*void mxStartTimer(int period) {
		mTimer = new Timer(period);
	}

	void timerEvent() {
		int[] event = new int[1];
		event[0] = EVENT_TYPE_TIMER;
		mMoSync.postEvent(event);
	}

	void mxStopTimer() {
		if(mTimer != null) {
			mTimer.stop();
			mTimer = null;
		}
	}*/


	void mxStruct5(Address t5) {
	}

	void mxStruct5o(Address t5) {
	}


	void mxCreateData(Handle placeholder, int size) {
		mMoSync.addResource(placeholder, new Binary(new byte[size]));
	}

	void mxDestroyObject(Handle handle) {
		if(mMoSync.getResource(handle) != null) {
			MYASSERT(!mMoSync.isResourceInFlux(handle));
			mMoSync.setResource(handle, null);
		}
	}

	int mxGetDataSize(Handle data) {
		BinaryInterface bi = (BinaryInterface)mMoSync.getResource(data);
		return bi.size();
	}

	void mxReadData(Handle data, Address dst, int offset, int size) throws Exception {
		BinaryInterface bi = (BinaryInterface)mMoSync.getResource(data);
		{
			InputStream in = bi.getInputStream();
			if(in.skip(offset) != offset) {
				BIG_PHAT_ERROR;
			}
			mMoSync.writeMemStream(dst, in, size);
			in.close();
		}
	}

	double mxTest1() {
		return 42.42;
	}
	double mxTest2(int meh) {
		return meh;
	}
	double mxTest3(double d) {
		return d;
	}
	double mxTest4(Address dblAddr) {
		mMoSync.writeDouble(dblAddr, Double.NaN);
		return Double.POSITIVE_INFINITY;
	}
	double mxTest5(Address dblAddr, double d2) {
		return 5;
	}
	double mxTest6(double d, Address dblAddr) {
		return 6;
	}
	double mxTest7(int meh, Address dblAddr) {
		return 7;
	}
	double mxTest8(int meh, double d2) {
		return 8;
	}
	double mxTest9(int meh, Address dblAddr, double d3) {
		return 9;
	}
	//double mxTestA(int meh, Address dblAddr, out double d3);	//should fail, due to insufficient argument slots
	double mxTestB(int meh, double d2, double d3) {
		return 11;
	}
	int mxTestC(int meh, Address dblAddr, double d3) {
		return 12;
	}
}
